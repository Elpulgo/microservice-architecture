@using System.Threading
@inject WebSocketService m_WebSocketService
@implements IDisposable

<div>
    @if(!string.IsNullOrEmpty(ErrorMessageConnect)){
        <div>Failed to connect to Websocket: @ErrorMessageConnect</div>
    }else{
        <h1>Broadcasted from Web Api</h1>
        <span>Key: @Model?.Key</span>
        <span>Value: @Model?.Value</span>
    }
</div>

@code{
    public string ErrorMessageConnect = string.Empty;
    public PostModel Model;
    private CancellationTokenSource m_DisposalTokenSource = new CancellationTokenSource();
    protected override async Task OnInitializedAsync()
    {
        var errorMessage = await m_WebSocketService.ConnectAsync(m_DisposalTokenSource.Token);
        ErrorMessageConnect = errorMessage;

        if (!string.IsNullOrEmpty(errorMessage))
            return;

        await foreach (var message in m_WebSocketService.ConsumeAsync(m_DisposalTokenSource.Token))
        {
            Model = message;
            StateHasChanged();
        }
    }

    public async void Dispose()
    {
        m_DisposalTokenSource.Cancel();
        await m_WebSocketService.CloseConnectionAsync();
    }
}